{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5ec884b8-26f9-43c0-a612-d1b83038cc14",
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-01-01T13:29:55.853104Z"
    },
    "is_executing": true
   },
   "outputs": [],
   "source": [
    "# data: https://download.pytorch.org/tutorial/data.zip\n",
    "import torch.nn as nn\n",
    "import torch\n",
    "from pdb import set_trace\n",
    "import io\n",
    "import os\n",
    "import unicodedata\n",
    "import string\n",
    "import glob\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import torch\n",
    "import random\n",
    "\n",
    "# alphabet small + capital letters + \" .,;'\"\n",
    "ALL_LETTERS = string.ascii_letters + \" .,;'\"\n",
    "N_LETTERS = len(ALL_LETTERS)\n",
    "\n",
    "# Turn a Unicode string to plain ASCII, thanks to https://stackoverflow.com/a/518232/2809427\n",
    "def unicode_to_ascii(s):\n",
    "    return ''.join(\n",
    "        c for c in unicodedata.normalize('NFD', s)\n",
    "        if unicodedata.category(c) != 'Mn'\n",
    "        and c in ALL_LETTERS\n",
    "    )\n",
    "\n",
    "def load_data():\n",
    "    # Build the category_lines dictionary, a list of names per language\n",
    "    category_lines = {}\n",
    "    all_categories = []\n",
    "    \n",
    "    def find_files(path):\n",
    "        return glob.glob(path)\n",
    "    \n",
    "    # Read a file and split into lines\n",
    "    def read_lines(filename):\n",
    "        lines = io.open(filename, encoding='utf-8').read().strip().split('\\n')\n",
    "        return [unicode_to_ascii(line) for line in lines]\n",
    "    \n",
    "    for filename in find_files('names/*.txt'):\n",
    "        from pdb import set_trace\n",
    "        category = os.path.splitext(os.path.basename(filename))[0]\n",
    "        all_categories.append(category)\n",
    "        \n",
    "        lines = read_lines(filename)\n",
    "        category_lines[category] = lines\n",
    "        \n",
    "    return category_lines, all_categories\n",
    "\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "To represent a single letter, we use a “one-hot vector” of \n",
    "size <1 x n_letters>. A one-hot vector is filled with 0s\n",
    "except for a 1 at index of the current letter, e.g. \"b\" = <0 1 0 0 0 ...>.\n",
    "\n",
    "To make a word we join a bunch of those into a\n",
    "2D matrix <line_length x 1 x n_letters>.\n",
    "\n",
    "That extra 1 dimension is because PyTorch assumes\n",
    "everything is in batches - we’re just using a batch size of 1 here.\n",
    "\"\"\"\n",
    "\n",
    "# Find letter index from all_letters, e.g. \"a\" = 0\n",
    "def letter_to_index(letter):\n",
    "    return ALL_LETTERS.find(letter)\n",
    "\n",
    "# Just for demonstration, turn a letter into a <1 x n_letters> Tensor\n",
    "def letter_to_tensor(letter):\n",
    "    tensor = torch.zeros(1, N_LETTERS)\n",
    "    tensor[0][letter_to_index(letter)] = 1\n",
    "    return tensor\n",
    "\n",
    "# Turn a line into a <line_length x 1 x n_letters>,\n",
    "# or an array of one-hot letter vectors\n",
    "def line_to_tensor(line):\n",
    "    tensor = torch.zeros(len(line), 1, N_LETTERS)\n",
    "    for i, letter in enumerate(line):\n",
    "        tensor[i][0][letter_to_index(letter)] = 1\n",
    "    return tensor\n",
    "\n",
    "\n",
    "def random_training_example(category_lines, all_categories):\n",
    "    \n",
    "    def random_choice(a):\n",
    "        random_idx = random.randint(0, len(a) - 1)\n",
    "        return a[random_idx]\n",
    "    \n",
    "    category = random_choice(all_categories)\n",
    "    line = random_choice(category_lines[category])\n",
    "    category_tensor = torch.tensor([all_categories.index(category)], dtype=torch.long)\n",
    "    line_tensor = line_to_tensor(line)\n",
    "    return category, line, category_tensor, line_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1b0eee26-3301-438d-be10-13d2d8efe721",
   "metadata": {
    "is_executing": true
   },
   "outputs": [],
   "source": [
    "class RNN(nn.Module):\n",
    "    \n",
    "    def __init__(self, input_size, hidden_size, output_size):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.hidden_size = hidden_size\n",
    "        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\n",
    "        self.i2o = nn.Linear(input_size + hidden_size, output_size)\n",
    "        \n",
    "    def forward(self, input_tensor, hidden_tensor):\n",
    "        combined = torch.cat((input_tensor, hidden_tensor), 1)\n",
    "        hidden = self.i2h(combined)\n",
    "        output = self.i2o(combined)\n",
    "        return output, hidden\n",
    "    \n",
    "    def init_hidden(self):\n",
    "        return torch.zeros(1, self.hidden_size)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fcc605e6-6b74-46ae-a57d-de29c405aad3",
   "metadata": {
    "is_executing": true
   },
   "outputs": [],
   "source": [
    "category_lines, all_categories = load_data()\n",
    "n_categories = len(all_categories)\n",
    "\n",
    "n_hidden = 128\n",
    "rnn = RNN(N_LETTERS, n_hidden, n_categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5421f969-4629-4864-a431-cc4f33781549",
   "metadata": {
    "is_executing": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1, 18])\n",
      "torch.Size([1, 128])\n"
     ]
    }
   ],
   "source": [
    "# one step\n",
    "input_tensor = letter_to_tensor('A')\n",
    "hidden_tensor = rnn.init_hidden()\n",
    "\n",
    "output, next_hidden = rnn(input_tensor, hidden_tensor)\n",
    "print(output.size())\n",
    "print(next_hidden.size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "144878f6-9272-4f0a-b445-be912ea6a59d",
   "metadata": {
    "is_executing": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([16])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output.argmax(dim=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6f9eca80-d8b8-446e-8da6-6ded438fc690",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Korean'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_categories[output.argmax(dim=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2a7333fe-8373-4bf9-ae59-8be4a7418432",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1, 18])\n",
      "torch.Size([1, 128])\n"
     ]
    }
   ],
   "source": [
    "# whole sequence/name\n",
    "input_tensor = line_to_tensor('Albert')\n",
    "hidden_tensor = rnn.init_hidden()\n",
    "\n",
    "output, next_hidden = rnn(input_tensor[0], hidden_tensor)\n",
    "print(output.size())\n",
    "print(next_hidden.size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5d9fc2e1-7e67-43ac-96b7-feb2af307cf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Korean\n"
     ]
    }
   ],
   "source": [
    "def category_from_output(output):\n",
    "    category_idx = torch.argmax(output).item()\n",
    "    return all_categories[category_idx]\n",
    "\n",
    "print(category_from_output(output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e6fdfd2b-7d12-4e74-8319-6d139d88c80a",
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()\n",
    "learning_rate = 0.001\n",
    "optimizer = torch.optim.Adam(rnn.parameters(), lr=learning_rate)\n",
    "\n",
    "def train(line_tensor, category_tensor):\n",
    "    hidden = rnn.init_hidden()\n",
    "    \n",
    "    for i in range(line_tensor.size()[0]):\n",
    "        output, hidden = rnn(line_tensor[i], hidden)\n",
    "        \n",
    "    loss = criterion(output, category_tensor)\n",
    "    \n",
    "    optimizer.zero_grad()\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    return output, loss.item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9cd85976-1071-4451-ac52-819488108fa6",
   "metadata": {},
   "outputs": [],
   "source": [
    "category, line, category_tensor, line_tensor = random_training_example(category_lines, all_categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4597a674-afcf-4c66-af8d-5c7b9f8b0027",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = []\n",
    "for i in range(line_tensor.shape[0]):\n",
    "    idx = (line_tensor[i].argmax(1))\n",
    "    l.append(ALL_LETTERS[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "88a38931-a4bc-456c-8f52-f172c485ba19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Sfakianos', 'Greek')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''.join(l), category"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc648424-84f1-46f4-a274-eb5eb52a45f3",
   "metadata": {},
   "source": [
    "## Make it better"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4502f6d2-b938-4f1c-aa77-626502443faa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_training_example(category_lines, all_categories):\n",
    "    \n",
    "    def random_choice(a):\n",
    "        random_idx = random.randint(0, len(a) - 1)\n",
    "        return a[random_idx]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8b95cf2-880a-4c73-ad1e-307f5cd2eaf7",
   "metadata": {},
   "source": [
    "1. Read everything to one location\n",
    "2. return x and y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8b6ed10d-49b3-4590-928b-790e1841681b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "def read_lines_from_files(directory):\n",
    "    results = []  # To store the tuples\n",
    "    for filename in os.listdir(directory):\n",
    "        if filename.endswith('.txt'):  # Process only .txt files\n",
    "            file_path = os.path.join(directory, filename)\n",
    "            with open(file_path, 'r', encoding='utf-8') as file:\n",
    "                for line in file:\n",
    "                    line_content = line.strip()  # Remove leading/trailing whitespace\n",
    "                    results.append((line_content, filename.replace('.txt', '')))\n",
    "    return results\n",
    "\n",
    "directory_path = 'names'\n",
    "lines_with_files = read_lines_from_files(directory_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eaa637f-b7e2-422a-99c1-ad7eb612a004",
   "metadata": {},
   "source": [
    "I need to generate two zero vectors, one for language and one for "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bff87f06-55a2-445c-acf0-30f22b398998",
   "metadata": {},
   "outputs": [],
   "source": [
    "class NamesDataset:\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        name, language = self.data[idx]\n",
    "        return name, language"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e7b71aca-abd9-469b-b337-93b13fdf22e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader, Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "eef2550f-0eb9-499a-943d-66015cd14977",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = NamesDataset(lines_with_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4ac1776b-5786-4389-85d7-0acb4cbb09b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "dl = DataLoader(ds, batch_size=1, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e085bd1c-e1ae-46ab-969f-c1cbfc8764db",
   "metadata": {},
   "outputs": [],
   "source": [
    "t = [('aaa', 'bbb'), ('ccc','ddd')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fcd1ee7a-a9b3-45b8-a1cb-bc024a274fd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'bbb'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6e26da7d-4993-459d-ad7a-34f24ef3c8bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = NamesDataset(lines_with_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2b3017b7-612a-4521-86f9-25a2f9d9b0b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name, guess and label Derchansky Russian Russian\n",
      "1 0.0924 Sfakianos / Russian CORRECT\n",
      "name, guess and label Vaiserman Russian Russian\n",
      "1 0.1442 Sfakianos / Russian CORRECT\n",
      "name, guess and label Balakhovsky Russian Russian\n",
      "1 0.0024 Sfakianos / Russian CORRECT\n",
      "name, guess and label Turlak Czech Russian\n",
      "1 1.7930 Sfakianos / Czech WRONG (Russian)\n",
      "name, guess and label Rainey Arabic English\n",
      "1 1.5337 Sfakianos / Arabic WRONG (English)\n",
      "name, guess and label Watters English English\n",
      "1 0.4079 Sfakianos / English CORRECT\n",
      "name, guess and label Vinnik Russian Russian\n",
      "1 0.2838 Sfakianos / Russian CORRECT\n",
      "name, guess and label Ran Chinese Chinese\n",
      "1 1.0873 Sfakianos / Chinese CORRECT\n",
      "name, guess and label Aswad English Arabic\n",
      "1 1.2538 Sfakianos / English WRONG (Arabic)\n",
      "name, guess and label Ruzimatov Russian Russian\n",
      "1 0.0004 Sfakianos / Russian CORRECT\n",
      "name, guess and label Kreskas English Greek\n",
      "1 1.9835 Sfakianos / English WRONG (Greek)\n",
      "name, guess and label Okui Japanese Japanese\n",
      "1 1.1098 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Holoshin Russian Russian\n",
      "1 0.2715 Sfakianos / Russian CORRECT\n",
      "name, guess and label Nielsen English English\n",
      "1 0.3501 Sfakianos / English CORRECT\n",
      "name, guess and label Keeble English English\n",
      "1 0.3520 Sfakianos / English CORRECT\n",
      "name, guess and label Vives Russian Spanish\n",
      "1 2.7450 Sfakianos / Russian WRONG (Spanish)\n",
      "name, guess and label Akutagawa Japanese Japanese\n",
      "1 0.0581 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Matheson English English\n",
      "1 0.4705 Sfakianos / English CORRECT\n",
      "name, guess and label Dontsov Russian Russian\n",
      "1 0.0031 Sfakianos / Russian CORRECT\n",
      "name, guess and label Bolton English English\n",
      "1 0.2280 Sfakianos / English CORRECT\n",
      "name, guess and label Bata Japanese Arabic\n",
      "2 1.9304 Sfakianos / Japanese WRONG (Arabic)\n",
      "name, guess and label Zhiboedov Russian Russian\n",
      "2 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Shalhoub Arabic Arabic\n",
      "2 0.0673 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Piccoli Italian Italian\n",
      "2 0.0438 Sfakianos / Italian CORRECT\n",
      "name, guess and label Imagawa Japanese Japanese\n",
      "2 0.0110 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Everhart Russian German\n",
      "2 3.0779 Sfakianos / Russian WRONG (German)\n",
      "name, guess and label Nassar Arabic Arabic\n",
      "2 0.0583 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Mihalkov Russian Russian\n",
      "2 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Totah Arabic Arabic\n",
      "2 0.3135 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Ghanem Arabic Arabic\n",
      "2 0.0550 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Wei Chinese Chinese\n",
      "2 0.0575 Sfakianos / Chinese CORRECT\n",
      "name, guess and label Bale English English\n",
      "2 0.4913 Sfakianos / English CORRECT\n",
      "name, guess and label Zasetsky Russian Russian\n",
      "2 0.0134 Sfakianos / Russian CORRECT\n",
      "name, guess and label Nahamkin Russian Russian\n",
      "2 0.3733 Sfakianos / Russian CORRECT\n",
      "name, guess and label Lihodedov Russian Russian\n",
      "2 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Djibuti Japanese Russian\n",
      "2 3.2566 Sfakianos / Japanese WRONG (Russian)\n",
      "name, guess and label Merlo Italian Italian\n",
      "2 0.9200 Sfakianos / Italian CORRECT\n",
      "name, guess and label Averianov Russian Russian\n",
      "2 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Lokhanin Russian Russian\n",
      "2 0.0176 Sfakianos / Russian CORRECT\n",
      "name, guess and label Bukoski Russian Polish\n",
      "2 2.7783 Sfakianos / Russian WRONG (Polish)\n",
      "name, guess and label Matsievich Russian Russian\n",
      "3 0.0542 Sfakianos / Russian CORRECT\n",
      "name, guess and label Anuchin Russian Russian\n",
      "3 0.2176 Sfakianos / Russian CORRECT\n",
      "name, guess and label Parakin Russian Russian\n",
      "3 0.0248 Sfakianos / Russian CORRECT\n",
      "name, guess and label Showell English English\n",
      "3 0.2795 Sfakianos / English CORRECT\n",
      "name, guess and label Rakhil Russian Russian\n",
      "3 0.2886 Sfakianos / Russian CORRECT\n",
      "name, guess and label Kennedy English Scottish\n",
      "3 5.1136 Sfakianos / English WRONG (Scottish)\n",
      "name, guess and label Bagmevsky Russian Russian\n",
      "3 0.0722 Sfakianos / Russian CORRECT\n",
      "name, guess and label Dolton English English\n",
      "3 0.1992 Sfakianos / English CORRECT\n",
      "name, guess and label Lupin Russian Russian\n",
      "3 0.1979 Sfakianos / Russian CORRECT\n",
      "name, guess and label Pyjov Russian Russian\n",
      "3 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Shalenkov Russian Russian\n",
      "3 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Golovatsky Russian Russian\n",
      "3 0.0056 Sfakianos / Russian CORRECT\n",
      "name, guess and label Kaye Japanese English\n",
      "3 3.3842 Sfakianos / Japanese WRONG (English)\n",
      "name, guess and label Janowski Russian Polish\n",
      "3 3.7731 Sfakianos / Russian WRONG (Polish)\n",
      "name, guess and label Amari Arabic Arabic\n",
      "3 0.5849 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Ewing English English\n",
      "3 0.3316 Sfakianos / English CORRECT\n",
      "name, guess and label Than Chinese Vietnamese\n",
      "3 2.4164 Sfakianos / Chinese WRONG (Vietnamese)\n",
      "name, guess and label Kuai Japanese Chinese\n",
      "3 1.5729 Sfakianos / Japanese WRONG (Chinese)\n",
      "name, guess and label Mas Greek Spanish\n",
      "3 3.8898 Sfakianos / Greek WRONG (Spanish)\n",
      "name, guess and label Pavlichenko Russian Russian\n",
      "3 0.0091 Sfakianos / Russian CORRECT\n",
      "name, guess and label Pispinis Russian Greek\n",
      "4 1.0773 Sfakianos / Russian WRONG (Greek)\n",
      "name, guess and label Avlov Russian Russian\n",
      "4 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Cook Korean English\n",
      "4 1.5777 Sfakianos / Korean WRONG (English)\n",
      "name, guess and label Isaac Japanese English\n",
      "4 3.6858 Sfakianos / Japanese WRONG (English)\n",
      "name, guess and label Gillard English English\n",
      "4 0.1419 Sfakianos / English CORRECT\n",
      "name, guess and label Eales English English\n",
      "4 0.5211 Sfakianos / English CORRECT\n",
      "name, guess and label Astratov Russian Russian\n",
      "4 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Rempler English Russian\n",
      "4 3.2425 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Chizhik Russian Russian\n",
      "4 0.0373 Sfakianos / Russian CORRECT\n",
      "name, guess and label Manson English English\n",
      "4 0.8143 Sfakianos / English CORRECT\n",
      "name, guess and label Abelló English Italian\n",
      "4 1.9906 Sfakianos / English WRONG (Italian)\n",
      "name, guess and label Riverov Russian Russian\n",
      "4 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Gudev Russian Russian\n",
      "4 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Dikusar Russian Russian\n",
      "4 0.3035 Sfakianos / Russian CORRECT\n",
      "name, guess and label Mindovsky Russian Russian\n",
      "4 0.0099 Sfakianos / Russian CORRECT\n",
      "name, guess and label Fonda Italian Italian\n",
      "4 1.4961 Sfakianos / Italian CORRECT\n",
      "name, guess and label Zelentsov Russian Russian\n",
      "4 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Yakobson English Russian\n",
      "4 0.9943 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Yuzhakov Russian Russian\n",
      "4 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Shamoun Arabic Arabic\n",
      "4 0.9076 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Fofanov Russian Russian\n",
      "5 0.0001 Sfakianos / Russian CORRECT\n",
      "name, guess and label Froy English English\n",
      "5 0.1466 Sfakianos / English CORRECT\n",
      "name, guess and label Fukunaka Japanese Japanese\n",
      "5 0.5374 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Romijnders Dutch Dutch\n",
      "5 0.3257 Sfakianos / Dutch CORRECT\n",
      "name, guess and label Kunze German German\n",
      "5 0.6902 Sfakianos / German CORRECT\n",
      "name, guess and label Tsigra Italian Russian\n",
      "5 2.0863 Sfakianos / Italian WRONG (Russian)\n",
      "name, guess and label Angioli Italian Italian\n",
      "5 0.2288 Sfakianos / Italian CORRECT\n",
      "name, guess and label Paharkov Russian Russian\n",
      "5 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Yankevich Russian Russian\n",
      "5 0.0024 Sfakianos / Russian CORRECT\n",
      "name, guess and label Artz Spanish German\n",
      "5 1.0761 Sfakianos / Spanish WRONG (German)\n",
      "name, guess and label Duarte English Portuguese\n",
      "5 7.0702 Sfakianos / English WRONG (Portuguese)\n",
      "name, guess and label Baevski Russian Russian\n",
      "5 0.1279 Sfakianos / Russian CORRECT\n",
      "name, guess and label Switzer German German\n",
      "5 0.5032 Sfakianos / German CORRECT\n",
      "name, guess and label Gluzman Russian Russian\n",
      "5 0.1382 Sfakianos / Russian CORRECT\n",
      "name, guess and label Vederman Russian Russian\n",
      "5 0.7622 Sfakianos / Russian CORRECT\n",
      "name, guess and label Abjalilov Russian Russian\n",
      "5 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Mcdonnell English English\n",
      "5 0.2666 Sfakianos / English CORRECT\n",
      "name, guess and label Baklastoff Russian Russian\n",
      "5 0.0076 Sfakianos / Russian CORRECT\n",
      "name, guess and label Ui Japanese Japanese\n",
      "5 0.4399 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Stoppelbein Russian German\n",
      "5 4.2643 Sfakianos / Russian WRONG (German)\n",
      "name, guess and label Leeming English English\n",
      "6 0.8910 Sfakianos / English CORRECT\n",
      "name, guess and label Stary Arabic Czech\n",
      "6 5.0482 Sfakianos / Arabic WRONG (Czech)\n",
      "name, guess and label Phelps English English\n",
      "6 0.6135 Sfakianos / English CORRECT\n",
      "name, guess and label Samuel Arabic English\n",
      "6 4.6643 Sfakianos / Arabic WRONG (English)\n",
      "name, guess and label Vogt English German\n",
      "6 2.6739 Sfakianos / English WRONG (German)\n",
      "name, guess and label Cowell English English\n",
      "6 0.1702 Sfakianos / English CORRECT\n",
      "name, guess and label Foss English French\n",
      "6 3.4864 Sfakianos / English WRONG (French)\n",
      "name, guess and label Rheem English Korean\n",
      "6 2.1550 Sfakianos / English WRONG (Korean)\n",
      "name, guess and label Goloskokov Russian Russian\n",
      "6 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Galkovsky Russian Russian\n",
      "6 0.0020 Sfakianos / Russian CORRECT\n",
      "name, guess and label Mukomel Czech Russian\n",
      "6 2.3118 Sfakianos / Czech WRONG (Russian)\n",
      "name, guess and label Nuryaev Russian Russian\n",
      "6 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Lysihin Russian Russian\n",
      "6 0.0344 Sfakianos / Russian CORRECT\n",
      "name, guess and label Traynor English English\n",
      "6 0.4224 Sfakianos / English CORRECT\n",
      "name, guess and label Zhuravsky Russian Russian\n",
      "6 0.0034 Sfakianos / Russian CORRECT\n",
      "name, guess and label Lovelock English English\n",
      "6 0.7480 Sfakianos / English CORRECT\n",
      "name, guess and label Kajahara Japanese Japanese\n",
      "6 0.0103 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Clayton English English\n",
      "6 0.1207 Sfakianos / English CORRECT\n",
      "name, guess and label Zhernov Russian Russian\n",
      "6 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Cheshire English English\n",
      "6 0.3731 Sfakianos / English CORRECT\n",
      "name, guess and label Cernohous English Czech\n",
      "7 4.9506 Sfakianos / English WRONG (Czech)\n",
      "name, guess and label Turaev Russian Russian\n",
      "7 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Rousset English English\n",
      "7 0.7233 Sfakianos / English CORRECT\n",
      "name, guess and label Dudnikov Russian Russian\n",
      "7 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Luzzatto Russian Italian\n",
      "7 1.6171 Sfakianos / Russian WRONG (Italian)\n",
      "name, guess and label Jijemsky Russian Russian\n",
      "7 0.0266 Sfakianos / Russian CORRECT\n",
      "name, guess and label Zharuev Russian Russian\n",
      "7 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Shamon Arabic Arabic\n",
      "7 0.2804 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Montagna Italian Italian\n",
      "7 0.5494 Sfakianos / Italian CORRECT\n",
      "name, guess and label Muirchertach Irish Irish\n",
      "7 0.5836 Sfakianos / Irish CORRECT\n",
      "name, guess and label Mikhalevich Russian Russian\n",
      "7 0.0125 Sfakianos / Russian CORRECT\n",
      "name, guess and label Avtamonov Russian Russian\n",
      "7 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Seidel Arabic German\n",
      "7 2.5636 Sfakianos / Arabic WRONG (German)\n",
      "name, guess and label D'onofrio Italian Italian\n",
      "7 0.0288 Sfakianos / Italian CORRECT\n",
      "name, guess and label Piskach Russian Czech\n",
      "7 4.0845 Sfakianos / Russian WRONG (Czech)\n",
      "name, guess and label Hiu Chinese Chinese\n",
      "7 0.3668 Sfakianos / Chinese CORRECT\n",
      "name, guess and label Juzeev Russian Russian\n",
      "7 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Dehtyar Russian Russian\n",
      "7 0.2212 Sfakianos / Russian CORRECT\n",
      "name, guess and label Murychev Russian Russian\n",
      "7 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Ramsden Dutch English\n",
      "7 1.4706 Sfakianos / Dutch WRONG (English)\n",
      "name, guess and label Agalakoff Russian Russian\n",
      "8 0.0091 Sfakianos / Russian CORRECT\n",
      "name, guess and label Birut Russian Russian\n",
      "8 0.7331 Sfakianos / Russian CORRECT\n",
      "name, guess and label Grigorchikov Russian Russian\n",
      "8 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Kauffmann English German\n",
      "8 1.0684 Sfakianos / English WRONG (German)\n",
      "name, guess and label Imai Arabic Japanese\n",
      "8 2.0404 Sfakianos / Arabic WRONG (Japanese)\n",
      "name, guess and label Mcconnell English English\n",
      "8 0.3414 Sfakianos / English CORRECT\n",
      "name, guess and label Lohanin Russian Russian\n",
      "8 0.1782 Sfakianos / Russian CORRECT\n",
      "name, guess and label Böhmer German German\n",
      "8 0.7715 Sfakianos / German CORRECT\n",
      "name, guess and label Agapov Russian Russian\n",
      "8 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Awkhadieff Russian Russian\n",
      "8 0.0062 Sfakianos / Russian CORRECT\n",
      "name, guess and label Farr English English\n",
      "8 0.5957 Sfakianos / English CORRECT\n",
      "name, guess and label Agani Japanese Italian\n",
      "8 1.1287 Sfakianos / Japanese WRONG (Italian)\n",
      "name, guess and label Bishara Arabic Arabic\n",
      "8 0.1368 Sfakianos / Arabic CORRECT\n",
      "name, guess and label Robson English English\n",
      "8 0.2490 Sfakianos / English CORRECT\n",
      "name, guess and label Böhme German German\n",
      "8 0.7784 Sfakianos / German CORRECT\n",
      "name, guess and label Mokeev Russian Russian\n",
      "8 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Obando Italian Spanish\n",
      "8 2.6170 Sfakianos / Italian WRONG (Spanish)\n",
      "name, guess and label Vild English Russian\n",
      "8 2.1793 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Binnington English English\n",
      "8 0.1900 Sfakianos / English CORRECT\n",
      "name, guess and label Zhurihin Russian Russian\n",
      "8 0.0028 Sfakianos / Russian CORRECT\n",
      "name, guess and label Islyamov Russian Russian\n",
      "9 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Cap Chinese Czech\n",
      "9 3.1727 Sfakianos / Chinese WRONG (Czech)\n",
      "name, guess and label Renne English Russian\n",
      "9 4.1017 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Greensmith Russian English\n",
      "9 1.5391 Sfakianos / Russian WRONG (English)\n",
      "name, guess and label Demirchyan English Russian\n",
      "9 1.3525 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Bowden English English\n",
      "9 0.2395 Sfakianos / English CORRECT\n",
      "name, guess and label Ott English Russian\n",
      "9 1.8196 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Babakulov Russian Russian\n",
      "9 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Sulzbach German German\n",
      "9 1.1229 Sfakianos / German CORRECT\n",
      "name, guess and label Burn English English\n",
      "9 0.4691 Sfakianos / English CORRECT\n",
      "name, guess and label Poogelman Russian Russian\n",
      "9 0.4812 Sfakianos / Russian CORRECT\n",
      "name, guess and label Jewell English English\n",
      "9 0.1673 Sfakianos / English CORRECT\n",
      "name, guess and label Li Vietnamese Russian\n",
      "9 3.6800 Sfakianos / Vietnamese WRONG (Russian)\n",
      "name, guess and label Zhabrev Russian Russian\n",
      "9 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Aleppo Italian Italian\n",
      "9 0.4619 Sfakianos / Italian CORRECT\n",
      "name, guess and label Zhenovach Russian Russian\n",
      "9 0.0118 Sfakianos / Russian CORRECT\n",
      "name, guess and label Bishop English English\n",
      "9 0.3102 Sfakianos / English CORRECT\n",
      "name, guess and label Addinall English English\n",
      "9 0.2485 Sfakianos / English CORRECT\n",
      "name, guess and label Abesadze Russian Russian\n",
      "9 0.2737 Sfakianos / Russian CORRECT\n",
      "name, guess and label Jeffreys English English\n",
      "9 0.6069 Sfakianos / English CORRECT\n",
      "name, guess and label Biondo Russian Italian\n",
      "10 1.2927 Sfakianos / Russian WRONG (Italian)\n",
      "name, guess and label Beltz German German\n",
      "10 0.3485 Sfakianos / German CORRECT\n",
      "name, guess and label Vilyamovsky Russian Russian\n",
      "10 0.0001 Sfakianos / Russian CORRECT\n",
      "name, guess and label Jikov Russian Russian\n",
      "10 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Altimari Italian Italian\n",
      "10 0.7270 Sfakianos / Italian CORRECT\n",
      "name, guess and label Templeman Russian English\n",
      "10 1.1636 Sfakianos / Russian WRONG (English)\n",
      "name, guess and label Adelfinski Russian Russian\n",
      "10 0.5142 Sfakianos / Russian CORRECT\n",
      "name, guess and label Makhurov Russian Russian\n",
      "10 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Dzhevetsky Russian Russian\n",
      "10 0.0013 Sfakianos / Russian CORRECT\n",
      "name, guess and label Mccormack German English\n",
      "10 1.0005 Sfakianos / German WRONG (English)\n",
      "name, guess and label Shakhbanov Russian Russian\n",
      "10 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Pagano Italian Italian\n",
      "10 0.2264 Sfakianos / Italian CORRECT\n",
      "name, guess and label Janitsky Russian Russian\n",
      "10 0.0374 Sfakianos / Russian CORRECT\n",
      "name, guess and label Vilenchik Russian Russian\n",
      "10 0.0409 Sfakianos / Russian CORRECT\n",
      "name, guess and label Renne English Russian\n",
      "10 4.0747 Sfakianos / English WRONG (Russian)\n",
      "name, guess and label Kunisada Japanese Japanese\n",
      "10 0.0203 Sfakianos / Japanese CORRECT\n",
      "name, guess and label Dyachkov Russian Russian\n",
      "10 0.0000 Sfakianos / Russian CORRECT\n",
      "name, guess and label Martsenyuk Russian Russian\n",
      "10 0.0134 Sfakianos / Russian CORRECT\n",
      "name, guess and label Awagimoff Russian Russian\n",
      "10 0.0841 Sfakianos / Russian CORRECT\n",
      "name, guess and label Horalya Russian Russian\n",
      "10 0.3931 Sfakianos / Russian CORRECT\n",
      "CPU times: user 4min 4s, sys: 12min 38s, total: 16min 42s\n",
      "Wall time: 1min 46s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "j = 0\n",
    "accurate = 0\n",
    "wrong = 0\n",
    "current_loss = 0\n",
    "all_losses = []\n",
    "plot_steps, print_steps = 1000, 5000\n",
    "num_epochs = 10\n",
    "for i in range(num_epochs):\n",
    "    for name, language in dl:\n",
    "        language = language[0]\n",
    "        name = name[0]\n",
    "    # category, line, category_tensor, line_tensor = random_training_example(category_lines, all_categories)\n",
    "        category_tensor = torch.tensor([all_categories.index(language)], dtype=torch.long)\n",
    "        # print(category_tensor)\n",
    "        line_tensor = line_to_tensor(name)\n",
    "        output, loss = train(line_tensor, category_tensor)\n",
    "        current_loss += loss \n",
    "        \n",
    "    # if (i+1) % plot_steps == 0:\n",
    "    #     all_losses.append(current_loss / plot_steps)\n",
    "    #     current_loss = 0\n",
    "        j+=1\n",
    "        if (j+1) % plot_steps == 0:\n",
    "            guess = category_from_output(output)\n",
    "            print('name, guess and label', name, guess, language)\n",
    "            correct = \"CORRECT\" if guess == language else f\"WRONG ({language})\"\n",
    "            if guess == language:\n",
    "                accurate +=1\n",
    "            else:\n",
    "                wrong +=1\n",
    "            print(f\"{i+1} {loss:.4f} {line} / {guess} {correct}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b8f867d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "> Anetakis\n",
      "Greek\n"
     ]
    }
   ],
   "source": [
    "predict('Anetakis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2118647b-4409-4484-ac9f-8030b721e0de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(149, 51)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accurate, wrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a3f273e2-9735-4d39-9b5a-22af67875f62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x3176f7010>]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(all_losses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c3713071-2b58-4d89-a488-c7322d82e2e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(input_line):\n",
    "    print(f\"\\n> {input_line}\")\n",
    "    with torch.no_grad():\n",
    "        line_tensor = line_to_tensor(input_line)\n",
    "        \n",
    "        hidden = rnn.init_hidden()\n",
    "    \n",
    "        for i in range(line_tensor.size()[0]):\n",
    "            output, hidden = rnn(line_tensor[i], hidden)\n",
    "        \n",
    "        guess = category_from_output(output)\n",
    "        print(guess)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "cba00282",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "> Alexey\n",
      "English\n"
     ]
    }
   ],
   "source": [
    "predict('Alexey')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c22a243d-a5ef-4fbd-8253-c53bc36a4caa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# while True:\n",
    "#     sentence = input(\"Input:\")\n",
    "#     if sentence == \"quit\":\n",
    "#         break\n",
    "    \n",
    "#     predict(sentence)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9491eefc-2189-4883-ad75-08db2f4f38df",
   "metadata": {},
   "source": [
    "Antonopoulos\n",
    "Antonopoulos\n",
    "Arvanitoyannis\n",
    "Avgerinos\n",
    "Banos\n",
    "Batsakis\n",
    "Bekyros\n",
    "Belesis\n",
    "Bertsimas\n",
    "Bilias\n",
    "Blades\n",
    "Bouloukos\n",
    "Brisimitzaki"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "all_purpose_venv",
   "language": "python",
   "name": "all_purpose_venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
